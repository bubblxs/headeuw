#!/bin/bash

set -e

DEBUG=0

echo_f () 
{
      if [ $DEBUG -eq 1 ]; then
            echo -e "$@"

      else
            local filepath=${@: -1}
            local arr=("$@")

            unset arr[-1]

            echo -e "${arr[*]}" >> $filepath
      fi
}

echo_padding_block ()
{
      local num_padding=$1
      
      shift

      while [ $num_padding -gt 0 ]; do
            echo_f $@
            ((num_padding--))
      done
}

# we do be finding where to start printing
# in this case, at the half of the arr size
# ??? dont known how to name it, fam
some_fucking_avg_calc () 
{
      local arr_len=$1
      local arr_len2=$2
      local half=$(((arr_len2 / 2) - (arr_len / 2)))

      if [ ! $((half % 2)) -eq 0 ]; then
            half=$((half + 1))
      fi

      echo $half
}

# god... i wish there were a better way to do this. idk
size_of_arr ()
{
      local -n arr=$1
      local size=0

      for _ in "${!arr[@]}"; do
            size=$((size + 1))
      done

      echo $size
}

build_blank_spaces ()
{
      printf '%*s' $1 ' '
}

largest_line ()
{     
      local -n arr=$1
      local largest=0;
      local line_size=0

      for key in "${!arr[@]}"; do
            line_size=$(echo "${arr[$key]}" | wc -c)

            if [ $line_size -gt $largest ]; then
                  largest=$line_size
            fi
      done

      echo $largest
}

build_delimiter ()
{     
      local str=""
      local delimiter_char=${2:-"="}
      local len_delimiter=${1:-10}

      while [ $len_delimiter -gt 0 ]; do
            str="${str}${delimiter_char}"
            ((len_delimiter--))
      done

      echo $str
}

main () 
{
      if [ ! $# -eq 1 ] && [ $DEBUG -eq 0 ]; then
            echo -e "we need one file to append the header, fam. usage: bash $0 ./file_to_append.cpp." >&2
            exit 1
      fi

      local FILENAME=$(basename $0)

      if [ $DEBUG -eq 0 ]; then
            FILENAME=$(basename $1)
            
            if [ ! -f $FILENAME ]; then
                  echo "output file was not found." >&2
                  exit 1
            fi
      fi

      local DELIMITER_LEN=76
      local PADDING_BLOCK=0
      local PADDING_INLINE=$((DELIMITER_LEN / 4))
      local DELIMITER_CHAR="="
      local COMMENT_LINE="//"
      declare -A CONTENT_ARR=(
            [0]=$FILENAME
            [1]=$"author: $(whoami)@$(cat /etc/hostname)"
            [2]=$"updated at: $(date +"%d/%m/%y %H:%M:%S")"
      )
      declare -A MASCOT_ARR=(
            [0]=' /\_/\'
            [1]='( o.o )'
            [2]=' >   <'
      )
      local MASCOT_ARR_LEN=${#MASCOT_ARR[*]}
      local CONTENT_ARR_LEN=${#CONTENT_ARR[*]}
      local LARGEST_LINE_CONTENT_LEN=$(largest_line CONTENT_ARR)
      local DELIMITER=$"$COMMENT_LINE $(build_delimiter $DELIMITER_LEN $DELIMITER_CHAR)"
      local BLANK_SPACES=$(build_blank_spaces $PADDING_INLINE)

      local TMP_FILE=""

      if [ $DEBUG -eq 0 ]; then
            TMP_FILE=$(mktemp /tmp/$FILENAME.XXX --suffix=".tmp")
            
            if [ ! -f $TMP_FILE ]; then
                  echo "temp file was not created." >&2
                  exit 1
            fi
      fi

      local start_printing_mascot_index=0
      local start_printing_content_index=0
      local largest_arr=$CONTENT_ARR_LEN

      if [ $CONTENT_ARR_LEN -gt $MASCOT_ARR_LEN ]; then
            start_printing_mascot_index=$(($(some_fucking_avg_calc $MASCOT_ARR_LEN $CONTENT_ARR_LEN) - 1))

      elif [ $MASCOT_ARR_LEN -gt $CONTENT_ARR_LEN ]; then
            start_printing_content_index=$(($(some_fucking_avg_calc $CONTENT_ARR_LEN $MASCOT_ARR_LEN) - 1))
            largest_arr=$MASCOT_ARR_LEN
      fi

      echo_f $DELIMITER $TMP_FILE

      echo_padding_block $PADDING_BLOCK $COMMENT_LINE $TMP_FILE

      for((i = 0, m = 0, c = 0; i < largest_arr; i++)); do
            local mascot=""
            local content=""
            local num_blank_spaces=0
            local blank_spaces_to_mascot=""

            if [ $i -ge $start_printing_content_index ] && [ $c -lt $CONTENT_ARR_LEN ]; then
                  content_line_len="${#CONTENT_ARR[$c]}"
                  num_blank_spaces=$((LARGEST_LINE_CONTENT_LEN - content_line_len))
                  blank_spaces_to_mascot=$(build_blank_spaces $num_blank_spaces)
                  content="${CONTENT_ARR[$c]}"

                  c=$((c + 1))
            fi

            if [ $i -ge $start_printing_mascot_index ] && [ $m -lt $MASCOT_ARR_LEN ]; then
                  mascot="${MASCOT_ARR[$m]}"

                  if [ "$content" == "" ]; then
                        content=$(build_blank_spaces $LARGEST_LINE_CONTENT_LEN)
                  fi

                  m=$((m + 1))
            fi

            echo_f "$COMMENT_LINE" "$BLANK_SPACES" "$content" "$blank_spaces_to_mascot" "$mascot" $TMP_FILE
      done

      echo_padding_block $PADDING_BLOCK $COMMENT_LINE $TMP_FILE

      echo_f $DELIMITER "\n" $TMP_FILE

      if [ $DEBUG -eq 0 ]; then
            cat $FILENAME >> $TMP_FILE
            cat $TMP_FILE > $FILENAME

            rm $TMP_FILE
      fi
}

main $@